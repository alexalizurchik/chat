{"version":3,"sources":["store/reducer.js","store/store.js","utils.js","components/messagesList/MessagesList.js","components/submitForm/SubmitForm.js","components/userNameDialog/UserNameDialog.js","components/disconnectionDialog/DisonnectionDialog.js","store/actions.js","store/selectors.js","components/app/useAppMessages.js","components/app/useAppUserName.js","components/app/useAppState.js","components/app/App.js","index.js"],"names":["INITIAL_STATE","appState","messages","userName","combineReducers","state","payload","type","createStore","reducer","window","__REDUX_DEVTOOLS_EXTENSION__","stripWhiteSpaces","str","replace","MessagesList","firstUnreadMessageId","updateInterlocutor","listRef","React","createRef","firstUnreadMessageRef","prevDate","Date","scrolledBottom","useRef","useEffect","current","scrollTo","scrollHeight","scrollAtBottom","scrollTop","clientHeight","offsetTop","onInterlocutorHandler","e","interlocutor","target","textContent","ref","className","map","message","date","currentDate","getDate","formatDate","time","key","id","from","onClick","hours","getHours","minutes","getMinutes","formatTime","useStyles","makeStyles","theme","createStyles","container","display","alignItems","paddingTop","paddingBottom","justifyContent","boxSizing","width","breakpoints","down","flexDirection","button","margin","spacing","backgroundColor","input","SubmitForm","onSubmit","onClearInterlocutor","classes","formRef","inputRef","onKeyDown","useCallback","keyCode","shiftKey","preventDefault","dispatchEvent","Event","name","Input","disabled","multiline","placeholder","rowsMax","autoFocus","Button","variant","color","right","marginTop","position","wordWrap","fontSize","UserNameDialog","updateData","useState","open","setOpen","handleClose","handleOK","document","querySelector","value","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","TextField","fullWidth","autoComplete","DialogActions","dialog","marginRight","marginLeft","DisconnectionDialog","updateShowDisconnectionDialog","aria-describedby","DialogContentText","selectMessages","selectUserName","selectAppState","useAppMessages","dispatch","useDispatch","msgs","useSelector","initMessages","loadMessagesHistory","addMessages","getNewMessages","useAppUserName","setUserName","setUsername","useAppState","networkState","setState","setAppState","getFromStorage","def","JSON","parse","localStorage","getItem","err","appendObjectToStorage","storage","obj","setItem","stringify","App","showDisconnectionDialog","setShowDisconnectionDialog","setFirstUnreadMessageId","refSocket","setInterlocutor","updateUserName","handleClearInterlocutor","restoreSession","st","handleUnload","addEventListener","removeEventListener","connectToSocket","WebSocket","onopen","onclose","navigator","onLine","offlineHandler","reconnect","Function","prototype","close","interval","setInterval","readyState","clearInterval","onmessage","event","newArr","data","forEach","sort","a","b","length","hidden","Notification","permission","notification","tag","setTimeout","bind","requestPermission","notify","handleSubmit","formData","FormData","messageText","get","msg","concat","send","online","ReactDOM","render","store","getElementById"],"mappings":"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","file":"static/js/main.85c28092.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\nexport const SET_USERNAME = 'SET_USERNAME';\n\nexport const GET_NEW_MESSAGES = 'GET_NEW_MESSAGES';\n\nexport const LOAD_MESSAGES_HISTORY = 'LOAD_MESSAGES_HISTORY';\n\nexport const SET_APP_STATE = 'SET_APP_STATE';\n\nconst INITIAL_STATE = {\n  appState: true,\n  messages: [],\n  userName: '',\n};\n\nconst appState = (state = INITIAL_STATE.appState, { payload, type }) => {\n  if (type === SET_APP_STATE) {\n    return payload;\n  }\n\n  return state;\n};\n\nconst messages = (state = INITIAL_STATE.messages, { payload, type }) => {\n  if (type === GET_NEW_MESSAGES) {\n    return [...state, ...payload];\n  }\n\n  if (type === SET_APP_STATE && payload === 'online') {\n    return INITIAL_STATE.messages;\n  }\n\n  if (type === LOAD_MESSAGES_HISTORY) {\n    return payload;\n  }\n\n  return state;\n};\n\nconst userName = (state = INITIAL_STATE.userName, { payload, type }) => {\n  if (type === SET_USERNAME) {\n    return payload;\n  }\n\n  return state;\n};\n\nexport default combineReducers({\n  appState,\n  messages,\n  userName,\n});\n","import { createStore } from 'redux';\n\nimport reducer from './reducer';\n\nexport default createStore(\n  reducer,\n  // eslint-disable-next-line no-underscore-dangle\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n","export const formatTime = (date) => {\n  let hours = date.getHours();\n\n  if (hours < 10) {\n    hours = `0${hours}`;\n  }\n\n  let minutes = date.getMinutes();\n\n  if (minutes < 10) {\n    minutes = `0${minutes}`;\n  }\n\n  return `${hours}:${minutes}`;\n};\n\nexport const formatDate = (date) => {\n  const currentDate = new Date();\n\n  if (date.getDate() === currentDate.getDate()) {\n    return 'today';\n  }\n  if (date.getDate() === currentDate.getDate() - 1) {\n    return 'yesterday';\n  }\n\n  return date.getDate();\n};\n\nexport const stripWhiteSpaces = str => (\n  typeof str === 'string'\n    ? str\n    // Remove all whitespaces at the beginning of each line\n      .replace(/^\\s\\s*/gm, '')\n      // Remove all whitespaces at the end of each line\n      .replace(/\\s\\s*$/gm, '')\n      // Replaces multiple spaces with single\n      .replace(/[^\\S\\n\\r]+/mg, ' ')\n    : str\n);\n","import React, { Fragment, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { formatTime, formatDate } from '../../utils';\nimport './messagesList.css';\n\nconst MessagesList = ({\n  messages,\n  userName,\n  firstUnreadMessageId,\n  updateInterlocutor,\n}) => {\n  const listRef = React.createRef();\n  const firstUnreadMessageRef = React.createRef();\n  let prevDate = new Date();\n  const scrolledBottom = useRef(true);\n\n  useEffect(() => {\n    if (!firstUnreadMessageId && scrolledBottom) {\n      listRef.current.scrollTo(0, listRef.current.scrollHeight);\n    }\n  }, [firstUnreadMessageId, listRef, messages]);\n\n  useEffect(() => {\n    const scrollAtBottom = listRef.current.scrollHeight - listRef.current.scrollTop === listRef.current.clientHeight;\n\n    if (!scrollAtBottom) {\n      listRef.current.scrollTo(0, listRef.current.scrollHeight - listRef.current.clientHeight);\n      scrolledBottom.current = scrollAtBottom;\n    }\n  }, [listRef]);\n\n  useEffect(() => {\n    if (firstUnreadMessageId && firstUnreadMessageRef.current) {\n      listRef.current.scrollTo(0, firstUnreadMessageRef.current.offsetTop - 100);\n    }\n  }, [firstUnreadMessageId, firstUnreadMessageRef, listRef]);\n\n  const onInterlocutorHandler = (e) => {\n    const interlocutor = e.target.textContent;\n\n    if (interlocutor !== userName) {\n      updateInterlocutor(interlocutor);\n    }\n  };\n\n  return (\n    <ul ref={listRef} className=\"messages-list\">\n      {messages.map((message) => {\n        const date = formatDate(new Date(message.time));\n\n        if (prevDate !== date) {\n          prevDate = date;\n\n          return (<li key={message.id} className=\"message-date\">{date}</li>);\n        }\n\n        return (\n          <Fragment key={message.id}>\n            {message.id === firstUnreadMessageId\n            && <li ref={firstUnreadMessageRef} className=\"messages-list__new-message\"> new messages </li>}\n\n            <li className=\"messages-list__item\">\n              <p className=\"message-description\">\n                <span\n                  className={`message-author ${(userName === message.from) ? 'message-author--highlighted' : ''}`}\n                  onClick={onInterlocutorHandler}\n                >\n                  {message.from}\n                </span>\n                <span className=\"message-time\">{formatTime(new Date(message.time))}</span>\n              </p>\n              <p className=\"message-text\">{message.message}</p>\n            </li>\n          </Fragment>\n        );\n      })}\n    </ul>\n  );\n};\n\nMessagesList.propTypes = {\n  messages: PropTypes.arrayOf(PropTypes.shape({\n    from: PropTypes.string,\n    message: PropTypes.string,\n    id: PropTypes.string,\n    time: PropTypes.number,\n  })),\n  userName: PropTypes.string,\n  firstUnreadMessageId: PropTypes.string,\n  updateInterlocutor: PropTypes.func,\n};\n\nexport default MessagesList;\n","import React, { useCallback, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport './submitForm.css';\n\nconst useStyles = makeStyles(theme => createStyles({\n  container: {\n    display: 'flex',\n    alignItems: 'center',\n    paddingTop: 30,\n    paddingBottom: 30,\n    justifyContent: 'center',\n    boxSizing: 'border-box',\n    width: '100%',\n    [theme.breakpoints.down('md')]: {\n      flexDirection: 'column',\n    },\n  },\n  button: {\n    margin: theme.spacing(1),\n    backgroundColor: '#472D74',\n  },\n  input: {\n    width: '80%',\n    [theme.breakpoints.down('md')]: {\n      width: '90%',\n    },\n  },\n}));\n\nconst SubmitForm = ({\n  onSubmit,\n  userName,\n  interlocutor,\n  onClearInterlocutor,\n}) => {\n  const classes = useStyles();\n  const formRef = useRef(null);\n  const inputRef = useRef(null);\n\n  const onKeyDown = useCallback((e) => {\n    if (e.keyCode === 13 && !e.shiftKey) {\n      e.preventDefault();\n\n      formRef.current.dispatchEvent(new Event('submit'));\n    }\n  }, []);\n\n  return (\n    <div className=\"submit-form__wrapper\">\n      {interlocutor && <span className=\"interlocutor\" onClick={onClearInterlocutor}>{interlocutor}, </span>}\n\n      <form\n        name=\"form\"\n        ref={formRef}\n        onSubmit={onSubmit}\n        className={classes.container}\n      >\n        <Input\n          disabled={!userName}\n          type=\"text\"\n          ref={inputRef}\n          multiline\n          name=\"message\"\n          placeholder={`${userName ? 'Type your message...' : 'Login to type your message'}`}\n          rowsMax={4}\n          className={classes.input}\n          onKeyDown={onKeyDown}\n          autoFocus\n        />\n        <Button\n          disabled={!userName}\n          type=\"submit\"\n          variant=\"contained\"\n          className={classes.button}\n          color=\"secondary\"\n        >\n          Submit\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nSubmitForm.propTypes = {\n  onSubmit: PropTypes.func,\n  userName: PropTypes.string,\n  interlocutor: PropTypes.string,\n  onClearInterlocutor: PropTypes.func,\n};\n\nexport default SubmitForm;\n","import React, { useCallback, useRef } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\n\nconst useStyles = makeStyles(theme => createStyles({\n  button: {\n    right: 2,\n    marginTop: 2,\n    position: 'absolute',\n    backgroundColor: '#472D74',\n    [theme.breakpoints.down('md')]: {\n      wordWrap: 'break-word',\n      width: '15%',\n      fontSize: 11,\n      margin: 0,\n    },\n  },\n}));\n\nexport default function UserNameDialog({ updateData, userName }) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const inputRef = useRef(null);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOK = useCallback(() => {\n    updateData(document.querySelector('#name').value);\n    setOpen(false);\n  }, [updateData]);\n\n  const onKeyDown = useCallback((e) => {\n    if (e.keyCode === 13) {\n      e.preventDefault();\n\n      handleOK();\n    }\n  }, [handleOK]);\n\n  return (\n    <>\n      <Button variant=\"contained\" color='secondary' onClick={handleClickOpen} className={classes.button}>\n        {`${userName ? 'Change nickname' : 'Enter nickname'}`}\n      </Button>\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Type your name</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            type=\"text\"\n            fullWidth\n            autoComplete='off'\n            ref={inputRef}\n            onKeyDown={onKeyDown}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleOK} color=\"primary\">\n            OK\n          </Button>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n\nUserNameDialog.propTypes = {\n  updateData: PropTypes.func,\n  userName: PropTypes.string,\n};\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\n\nconst useStyles = makeStyles(theme => createStyles({\n  dialog: {\n    width: '25%',\n    marginRight: 'auto',\n    marginLeft: 'auto',\n  },\n  [theme.breakpoints.down('md')]: {\n    wordWrap: 'break-word',\n    width: '15%',\n    fontSize: 11,\n    margin: 0,\n  },\n}));\n\nexport default function DisconnectionDialog({ updateShowDisconnectionDialog }) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n\n  const handleClose = () => {\n    setOpen(false);\n    updateShowDisconnectionDialog(false);\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.keyCode === 13) {\n      e.preventDefault();\n\n      handleClose();\n    }\n  };\n\n  return (\n    <div>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n        onKeyDown={handleKeyDown}\n        className={classes.dialog}\n      >\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            Sorry, there are some problems with the connection. Try it later :)\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nDisconnectionDialog.propTypes = {\n  updateShowDisconnectionDialog: PropTypes.func,\n};\n","import { GET_NEW_MESSAGES, LOAD_MESSAGES_HISTORY, SET_APP_STATE, SET_USERNAME } from './reducer';\n\nexport const setUsername = name => ({\n  type: SET_USERNAME,\n  payload: name,\n});\n\nexport const getNewMessages = messages => ({\n  type: GET_NEW_MESSAGES,\n  payload: messages,\n});\n\nexport const loadMessagesHistory = messages => ({\n  type: LOAD_MESSAGES_HISTORY,\n  payload: messages,\n});\n\nexport const setAppState = networkState => ({\n  type: SET_APP_STATE,\n  payload: networkState,\n});\n","export const selectMessages = state => state.messages;\n\nexport const selectUserName = state => state.userName;\n\nexport const selectAppState = state => state.appState;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useCallback } from 'react';\nimport { getNewMessages, loadMessagesHistory } from '../../store/actions';\nimport { selectMessages } from '../../store/selectors';\n\nconst useAppMessages = () => {\n  const dispatch = useDispatch();\n  const msgs = useSelector(selectMessages);\n\n  const initMessages = useCallback(messages => (\n    dispatch(loadMessagesHistory(messages))\n  ), [dispatch]);\n\n  const addMessages = useCallback(messages => (\n    dispatch(getNewMessages(messages))\n  ), [dispatch]);\n\n  return {\n    addMessages,\n    initMessages,\n    messages: msgs,\n  };\n};\n\nexport default useAppMessages;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useCallback } from 'react';\nimport { setUsername } from '../../store/actions';\nimport { selectUserName } from '../../store/selectors';\n\nconst useAppUserName = () => {\n  const dispatch = useDispatch();\n  const name = useSelector(selectUserName);\n\n  const setUserName = useCallback(userName => (\n    dispatch(setUsername(userName))\n  ), [dispatch]);\n\n  return {\n    setUserName,\n    userName: name,\n  };\n};\n\nexport default useAppUserName;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useCallback } from 'react';\nimport { setAppState } from '../../store/actions';\nimport { selectAppState } from '../../store/selectors';\n\nconst useAppState = () => {\n  const dispatch = useDispatch();\n  const networkState = useSelector(selectAppState);\n\n  const setState = useCallback(state => (\n    dispatch(setAppState(state))\n  ), [dispatch]);\n\n  return {\n    setState,\n    appState: networkState,\n  };\n};\n\nexport default useAppState;\n","import React, {\n  useEffect,\n  useCallback,\n  useState,\n  useRef,\n} from 'react';\nimport './app.css';\nimport MessagesList from '../messagesList/MessagesList';\nimport SubmitForm from '../submitForm/SubmitForm';\nimport UserNameDialog from '../userNameDialog/UserNameDialog';\nimport DisconnectionDialog from '../disconnectionDialog/DisonnectionDialog';\nimport { stripWhiteSpaces } from '../../utils';\nimport useAppMessages from './useAppMessages';\nimport useAppUserName from './useAppUserName';\nimport useAppState from './useAppState';\n\nconst getFromStorage = (key, def) => {\n  try {\n    return JSON.parse(localStorage.getItem(key)) || def;\n  } catch (err) {\n    return def;\n  }\n};\n\nconst appendObjectToStorage = (storage, obj) => {\n  let state = getFromStorage(storage, {});\n\n  state = {\n    ...state,\n    ...obj,\n  };\n\n  localStorage.setItem(storage, JSON.stringify(state));\n};\n\nconst notify = () => {\n  if (Notification.permission === 'granted') {\n    const notification = new Notification('У вас новое сообщение', { tag: 'message' });\n    setTimeout(notification.close.bind(notification), 4000);\n  } else if (Notification.permission !== 'denied') {\n    Notification.requestPermission();\n  }\n};\n\nconst App = () => {\n  const { addMessages, messages, initMessages } = useAppMessages();\n  const { setUserName, userName } = useAppUserName();\n  const { setState, appState } = useAppState();\n  const [showDisconnectionDialog, setShowDisconnectionDialog] = useState(false);\n  const [firstUnreadMessageId, setFirstUnreadMessageId] = useState(null);\n  const refSocket = useRef(null);\n  const [interlocutor, setInterlocutor] = useState('');\n  const updateUserName = useCallback(value => setUserName(value), [setUserName]);\n  const handleClearInterlocutor = useCallback(() => setInterlocutor(null), []);\n\n  const restoreSession = useCallback((st) => {\n    if (st.userName) {\n      setUserName(st.userName);\n    }\n  }, [setUserName]);\n\n  useEffect(() => {\n    const state = getFromStorage('appstate', {});\n\n    restoreSession(state);\n  }, [restoreSession]);\n\n  const handleUnload = useCallback(() => {\n    appendObjectToStorage('appstate', { userName });\n  }, [userName]);\n\n  useEffect(() => {\n    window.addEventListener('beforeunload', handleUnload);\n\n    return () => window.removeEventListener('beforeunload', handleUnload);\n  }, [handleUnload]);\n\n  useEffect(() => {\n    const connectToSocket = () => {\n      refSocket.current = new WebSocket('wss://wssproxy.herokuapp.com');\n\n      refSocket.current.onopen = () => {\n        initMessages([]);\n        setState(true);\n        setShowDisconnectionDialog(false);\n      };\n      refSocket.current.onclose = () => {\n        if (navigator.onLine) {\n          connectToSocket();\n        }\n\n        setState(false);\n      };\n    };\n\n    const reconnect = () => {\n      refSocket.current.onclose = Function.prototype;\n      refSocket.current.close();\n\n      connectToSocket();\n\n      const interval = setInterval(() => {\n        if (refSocket.current.readyState === 1) {\n          clearInterval(interval);\n        }\n\n        if (refSocket.current.readyState === 2 || refSocket.current.readyState === 3) {\n          clearInterval(interval);\n          reconnect();\n        }\n      }, 3000);\n    };\n\n    const offlineHandler = () => {\n      reconnect();\n\n      setState(false);\n      setShowDisconnectionDialog(true);\n    };\n\n    connectToSocket();\n\n    window.addEventListener('offline', offlineHandler);\n\n    return () => {\n      window.removeEventListener('offline', offlineHandler);\n    };\n  }, [setState]);\n\n  useEffect(() => {\n    refSocket.current.onmessage = (event) => {\n      const newArr = JSON.parse(event.data);\n\n      newArr.forEach(message => stripWhiteSpaces(message));\n      newArr.sort((a, b) => a.time - b.time);\n\n      if (messages.length === 0) {\n        initMessages(newArr);\n\n        return;\n      }\n\n      if (document.hidden) {\n        notify();\n\n        if (!firstUnreadMessageId) {\n          setFirstUnreadMessageId(newArr[0].id);\n        }\n      }\n\n      addMessages(newArr);\n    };\n\n    return () => {\n      refSocket.current.onmessage = null;\n    };\n  }, [firstUnreadMessageId, refSocket.current, messages]);\n\n  useEffect(() => {\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden && firstUnreadMessageId) {\n        setFirstUnreadMessageId(null);\n      }\n    });\n  }, [firstUnreadMessageId]);\n\n  const handleSubmit = useCallback((e) => {\n    e.preventDefault();\n\n    const formData = new FormData(e.target);\n    const messageText = stripWhiteSpaces(formData.get('message'));\n    const msg = {\n      from: userName,\n      message: messageText,\n    };\n\n    if (interlocutor) {\n      msg.message = interlocutor.concat(', ', msg.message);\n    }\n\n    if (appState) {\n      refSocket.current.send(JSON.stringify(msg));\n    } else {\n      setShowDisconnectionDialog(true);\n    }\n\n    document.querySelector('textarea').value = '';\n  }, [interlocutor, appState, userName]);\n\n  return (\n    <>\n      {showDisconnectionDialog && <DisconnectionDialog updateShowDisconnectionDialog={value => setShowDisconnectionDialog(value)} />}\n      <UserNameDialog updateData={updateUserName} userName={userName} />\n      <div className=\"wrapper\">\n        <h1 className='wrapper__title'>\n          {`${appState ? `${userName}, welcome to the chat!` : `${userName}! Unfortunately, you are offline!`}`}\n        </h1>\n        <MessagesList\n          userName={userName}\n          messages={messages}\n          firstUnreadMessageId={firstUnreadMessageId}\n          updateInterlocutor={setInterlocutor}\n        />\n        <SubmitForm\n          interlocutor={interlocutor}\n          online={appState}\n          onClearInterlocutor={handleClearInterlocutor}\n          onSubmit={handleSubmit}\n          userName={userName}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport store from './store/store';\nimport App from './components/app/App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}